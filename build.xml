<project xmlns:ivy="antlib:org.apache.ivy.ant" name="protrade-data">
	<property name="build.dir" value="build" />
	<property name="build.prod.dir" value="${build.dir}/prod" />
	<property name="build.test.dir" value="${build.dir}/test" />
	<property name="build.jar.dir" value="${build.dir}/jar" />
	<property name="src.dir" value="src" />
	<property name="unit.test.dir" value="tests-unit" />
	<property name="system.test.dir" value="tests-system" />
	<property name="lib.dir" value="lib"/>
	<property name="lib.static.dir" value="${lib.dir}/static"/>
	<property file="build.properties" />
	<property name="instrumented.dir" value="build/instrumented-classes" />

	<!-- IVY properties -->
	<property name="ivy.install.version" value="2.1.0" />
	<condition property="ivy.home" value="${env.IVY_HOME}">
		<isset property="env.IVY_HOME" />
	</condition>
	<property name="ivy.home" value="${user.home}/.ant" />
	<property name="ivy.jar.dir" value="${ivy.home}/lib" />
	<property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar" />

	<property name="reports.dir" value="${build.dir}/reports" />
	<property name="unit.test.report.dir" value="${reports.dir}/unit-tests" />
	<property name="system.test.report.dir" value="${reports.dir}/system-tests" />
	<property name="pmd.report.dir" value="${reports.dir}/pmd" />
	<property name="coverage.report.dir" value="${reports.dir}/test-coverage" />

	<property name="config.dir" value="config" />
	<property name="config.pmd.dir" value="${config.dir}/pmd" />
	<property name="config.log4j.dir" value="${config.dir}/log4j" />

	<property name="build.agent" value="git" />

	<!-- Set the CLASSPATH -->
	<path id="classpath">
		<pathelement location="${build.prod.dir}" />
		<pathelement location="${build.test.dir}" />
		<fileset dir="${lib.dir}" includes="*.jar"/>
		<fileset dir="${lib.static.dir}" includes="*.jar"/>
	</path>


	<!-- IVY targets -->
	<target name="download-ivy" unless="offline">
		<mkdir dir="${ivy.jar.dir}"/>
		<!-- download Ivy from web site so that it can be used even without any special installation -->
		<get src="http://repo2.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar" 
		             dest="${ivy.jar.file}" usetimestamp="true"/>
	</target>

	<target name="init-ivy" depends="download-ivy">
		<path id="ivy.lib.path">
			<fileset dir="${ivy.jar.dir}" includes="*.jar"/>
		</path>
		<taskdef resource="org/apache/ivy/ant/antlib.xml"
		                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
	</target>

	<target name="resolve" description="--> retrieve dependencies with ivy">
		<ivy:retrieve pattern="lib/[artifact].[ext]" type="jar,bundle"/>
	</target>

	<!-- Create the folders for required for build -->
	<target name="prepare">
		<mkdir dir="${build.dir}" />
		<mkdir dir="${build.prod.dir}" />
		<mkdir dir="${build.test.dir}" />
	</target>

	<!-- COMPILE task -->
	<target name="compile" depends="prepare">
		<javac srcdir="${src.dir}" includeantruntime="false" destdir="${build.prod.dir}" classpathref="classpath" debug="true" debuglevel="vars,lines,source" />
		<copy todir="${build.prod.dir}" file="${config.log4j.dir}/log4j.properties" />
	</target>

	<!-- RUN task - runs the main class -->
	<target name="run" depends="compile">
		<java classname="org.ic.protrade.data.demo.ScoreDemo" fork="true" classpathref="classpath"/>
	</target>

	<!-- JAR and RUN tasks to create & run a jar, running the tests first -->
	<target name="jar" depends="compile,unit-tests,system-tests">
	  <mkdir dir="${build.jar.dir}" />
		<jar destfile="${build.jar.dir}/protrade-data.jar" basedir="${build.prod.dir}" excludes="log4j.properties"/>
	</target>

	<!-- CLEAN task -->
	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${build.prod.dir}" />
		<delete dir="${build.test.dir}" />
		<delete dir="${coverage.report.dir}" />
		<delete file="cobertura.ser" />

	</target>

	<target name="clean-lib">
		<delete>
			<fileset dir="lib" includes="*.jar" excludes="generated.jar"/>
		</delete>
	</target>

	<!-- COMPILE all tests -->
	<target name="compile-tests" depends="compile">
		<javac srcdir="${unit.test.dir}" destdir="${build.test.dir}" classpathref="classpath" />
		<javac srcdir="${system.test.dir}" destdir="${build.test.dir}" classpathref="classpath" />
	</target>

	<!-- Coverage tasks -->
	<taskdef classpathref="classpath" resource="tasks.properties" />

	<target name="instrument" depends="compile">
		<cobertura-instrument todir="${instrumented.dir}">
			<fileset dir="build/prod">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>
	</target>

	<target name="coverage" depends="clean, instrument, unit-tests, system-tests">
		<cobertura-report destdir="${coverage.report.dir}">
			<fileset dir="${src.dir}">
			</fileset>
			<include name="**/*.java" />
		</cobertura-report>
	</target>

	<target name="coverage-unit-tests" depends="clean, instrument, unit-tests">
		<cobertura-report destdir="${coverage.report.dir}">
			<fileset dir="${src.dir}">
			</fileset>
			<include name="**/*.java" />
		</cobertura-report>
	</target>

	<target name="coverage-system-tests" depends="clean, instrument, unit-tests">
		<cobertura-report destdir="${coverage.report.dir}">
			<fileset dir="${src.dir}">
			</fileset>
			<include name="**/*.java" />
		</cobertura-report>
	</target>

	<!-- RUN unit tests -->
	<target name="unit-tests" depends="compile,compile-tests">
		<mkdir dir="${unit.test.report.dir}" />
		<junit printsummary="yes" errorProperty="test.failed" failureProperty="test.failed">
			<classpath location="${instrumented.dir}" />
			<classpath refid="classpath" />
			<formatter type="brief" usefile="false" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${unit.test.report.dir}">
				<fileset dir="${unit.test.dir}" includes="**/*Test.java" />
			</batchtest>
		</junit>
		<junitreport todir="${unit.test.report.dir}">
			<fileset dir="${unit.test.report.dir}" includes="TEST-*.xml" />
			<report todir="${unit.test.report.dir}" />
		</junitreport>
	</target>

	<!-- Run system tests -->
	<target name="system-tests" depends="compile,compile-tests">
		<mkdir dir="${system.test.report.dir}" />
		<junit printsummary="yes" errorProperty="test.failed" failureProperty="test.failed">
			<classpath location="${instrumented.dir}" />
			<classpath refid="classpath" />
			<formatter type="brief" usefile="false" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${system.test.report.dir}">
				<fileset dir="${system.test.dir}" includes="**/*Test.java" />
			</batchtest>
		</junit>

		<junitreport todir="${system.test.report.dir}">
			<fileset dir="${system.test.report.dir}" includes="TEST-*.xml" />
			<report todir="${system.test.report.dir}" />
		</junitreport>
	</target>

	<!-- PMD task -->
	<target name="pmd">
		<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask" classpathref="classpath" />
		<mkdir dir="${pmd.report.dir}" />
		<pmd shortFilenames="true">
			<!-- <ruleset>rulesets/favorites.xml</ruleset> -->
			<ruleset>basic,design,braces,junit</ruleset>
			<!-- <formatter type="html" toFile="pmd_report.html" linkPrefix="http://pmd.sourceforge.net/xref/"/>-->
			<formatter type="xml" toFile="${pmd.report.dir}/pmd.xml" />
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${unit.test.dir}">
				<include name="**/*.java" />
			</fileset>
			<fileset dir="${system.test.dir}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
		<xslt in="${pmd.report.dir}/pmd.xml" style="${config.pmd.dir}/format.xslt" out="${pmd.report.dir}/pmd.html" />
	</target>

	<!-- ALL task -->
	<target name="all" depends="coverage, pmd" />

	<!-- Git tasks -->
	<target name="git-all" depends="clean, git-unit-tests, git-system-tests" />

	<!-- Run system tests from git -->
	<target name="git-system-tests" depends="compile,compile-tests">
		<mkdir dir="${system.test.report.dir}" />
		<junit printsummary="yes" errorProperty="test.failed" failureProperty="test.failed" haltonfailure="true">
			<classpath location="${instrumented.dir}" />
			<classpath refid="classpath" />
			<formatter type="brief" usefile="false" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${system.test.report.dir}">
				<fileset dir="${system.test.dir}" includes="**/*Test.java" />
			</batchtest>
		</junit>

		<junitreport todir="${system.test.report.dir}">
			<fileset dir="${system.test.report.dir}" includes="TEST-*.xml" />
			<report todir="${system.test.report.dir}" />
		</junitreport>

		<fail if="test.failed" />
	</target>


	<!-- Run unit tests from git -->
	<target name="git-unit-tests" depends="compile,compile-tests">
		<mkdir dir="${unit.test.report.dir}" />
		<junit printsummary="yes" errorProperty="test.failed" failureProperty="test.failed" haltonfailure="true">
			<classpath location="${instrumented.dir}" />
			<classpath refid="classpath" />
			<formatter type="brief" usefile="false" />
			<formatter type="xml" />
			<batchtest fork="yes" todir="${unit.test.report.dir}">
				<fileset dir="${unit.test.dir}" includes="**/*Test.java" />
			</batchtest>
		</junit>
		<junitreport todir="${unit.test.report.dir}">
			<fileset dir="${unit.test.report.dir}" includes="TEST-*.xml" />
			<report todir="${unit.test.report.dir}" />
		</junitreport>

		<fail if="test.failed" />
	</target>


</project>
